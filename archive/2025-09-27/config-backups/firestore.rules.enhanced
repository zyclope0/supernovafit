rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // ====================================
    // HELPER FUNCTIONS
    // ====================================
    
    // Fonction helper pour v√©rifier si l'utilisateur est connect√©
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Fonction helper pour v√©rifier si l'utilisateur est propri√©taire
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // ====================================
    // üîí RATE LIMITING - Audit 30.09.2025
    // ====================================
    
    // Fonction de rate limiting bas√©e sur le temps
    // Limite: 100 op√©rations par heure par utilisateur
    function checkRateLimit() {
      // R√©cup√©rer le document de rate limiting de l'utilisateur
      let rateLimitDoc = get(/databases/$(database)/documents/rate_limits/$(request.auth.uid));
      
      // Si le document n'existe pas, autoriser (premi√®re requ√™te)
      if (!rateLimitDoc.exists()) {
        return true;
      }
      
      let data = rateLimitDoc.data;
      let now = request.time;
      let oneHourAgo = request.time.toMillis() - (60 * 60 * 1000);
      
      // Si le dernier reset est plus vieux qu'une heure, autoriser
      if (data.lastReset.toMillis() < oneHourAgo) {
        return true;
      }
      
      // V√©rifier si l'utilisateur n'a pas d√©pass√© la limite
      return data.requestCount < 100;
    }
    
    // Fonction de rate limiting pour les op√©rations critiques
    // Limite: 20 cr√©ations par heure
    function checkCreateRateLimit() {
      let rateLimitDoc = get(/databases/$(database)/documents/rate_limits/$(request.auth.uid));
      
      if (!rateLimitDoc.exists()) {
        return true;
      }
      
      let data = rateLimitDoc.data;
      let now = request.time;
      let oneHourAgo = request.time.toMillis() - (60 * 60 * 1000);
      
      if (data.lastReset.toMillis() < oneHourAgo) {
        return true;
      }
      
      return data.createCount < 20;
    }
    
    // ====================================
    // RATE LIMITS COLLECTION (Internal)
    // ====================================
    
    match /rate_limits/{userId} {
      // Auto-cr√©√© par les r√®gles, lecture/√©criture par l'utilisateur lui-m√™me
      allow read, write: if isOwner(userId);
    }
    
    // ====================================
    // USERS COLLECTION
    // ====================================
    
    match /users/{userId} {
      // Lecture: propri√©taire OU coach
      allow read: if isOwner(userId) || 
        (isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach');
      
      // Cr√©ation: propri√©taire uniquement + rate limit
      allow create: if isOwner(userId) && checkCreateRateLimit();
      
      // Mise √† jour: propri√©taire OU lien coach-athl√®te + rate limit
      allow update: if (isOwner(userId) || 
        (
          isAuthenticated() && 
          request.auth.uid == userId &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['ownerCoachId', 'updated_at']) &&
          request.resource.data.ownerCoachId != null
        )) && checkRateLimit();
      
      // Pas de suppression
      allow delete: if false;
    }
    
    // ====================================
    // REPAS COLLECTION
    // ====================================
    
    match /repas/{repasId} {
      allow read: if isAuthenticated() && 
        (resource.data.user_id == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach')
        && checkRateLimit();
      
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid
        && checkCreateRateLimit();
      
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
      
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
    }
    
    // ====================================
    // ENTRAINEMENTS COLLECTION
    // ====================================
    
    match /entrainements/{entrainementId} {
      allow read: if isAuthenticated() && 
        (resource.data.user_id == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach')
        && checkRateLimit();
      
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid
        && checkCreateRateLimit();
      
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
      
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
    }
    
    // ====================================
    // MESURES COLLECTION
    // ====================================
    
    match /mesures/{mesureId} {
      allow read: if isAuthenticated() && 
        (resource.data.user_id == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach')
        && checkRateLimit();
      
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid
        && checkCreateRateLimit();
      
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
      
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
    }
    
    // ====================================
    // JOURNAL COLLECTION
    // ====================================
    
    match /journal/{entryId} {
      allow read: if isAuthenticated() && 
        (resource.data.user_id == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach')
        && checkRateLimit();
      
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid
        && checkCreateRateLimit();
      
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
      
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
    }
    
    // ====================================
    // FAVORIS ALIMENTS COLLECTION
    // ====================================
    
    match /favoris_aliments/{favoriId} {
      allow read: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
      
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid
        && checkCreateRateLimit();
      
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
    }
    
    // ====================================
    // PHOTOS PROGRESSION COLLECTION
    // ====================================
    
    match /photos_progression/{photoId} {
      allow read: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
      
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid
        && checkCreateRateLimit();
      
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
      
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
    }
    
    // ====================================
    // MENUS TYPE COLLECTION
    // ====================================
    
    match /menus_type/{menuId} {
      // Lecture autoris√©e (templates publics) + rate limit
      allow read: if isAuthenticated() && checkRateLimit();
      
      // √âcriture limit√©e au coach propri√©taire
      allow create: if isAuthenticated() && 
        request.resource.data.coach_id == request.auth.uid
        && checkCreateRateLimit();
      
      allow update: if isAuthenticated() && 
        resource.data.coach_id == request.auth.uid
        && checkRateLimit();
      
      allow delete: if isAuthenticated() && 
        resource.data.coach_id == request.auth.uid
        && checkRateLimit();
    }
    
    // ====================================
    // PHOTOS LIBRES COLLECTION
    // ====================================
    
    match /photos_libres/{photoId} {
      allow read: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
      
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid
        && checkCreateRateLimit();
      
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
      
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
    }
    
    // ====================================
    // BADGES COLLECTION
    // ====================================
    
    match /badges/{badgeId} {
      allow read: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
      
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid
        && checkCreateRateLimit();
      
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
      
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
    }

    // ====================================
    // OBJECTIFS COLLECTION
    // ====================================
    
    match /objectifs/{objectifId} {
      allow read: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
      
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid
        && checkCreateRateLimit();
      
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
      
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
    }

    // ====================================
    // COACH COMMENTS COLLECTION
    // ====================================
    
    match /coach_comments/{commentId} {
      // Coachs peuvent cr√©er des commentaires + rate limit
      allow create: if isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach'
        && checkCreateRateLimit();
      
      // Lecture: coach ou athl√®te destinataire
      allow read: if isAuthenticated() && 
        (resource.data.coach_id == request.auth.uid || 
         resource.data.athlete_id == request.auth.uid)
        && checkRateLimit();
      
      // Mise √† jour: coach complet, athl√®te lecture seule
      allow update: if isAuthenticated() && (
        resource.data.coach_id == request.auth.uid ||
        (
          resource.data.athlete_id == request.auth.uid &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['read_by_athlete']) &&
          request.resource.data.read_by_athlete == true
        )
      ) && checkRateLimit();
      
      allow delete: if false;
    }

    // ====================================
    // COACH DIET PLANS COLLECTION
    // ====================================
    
    match /coach_diet_plans/{planId} {
      // Coachs peuvent cr√©er des plans
      allow create: if isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach' &&
        request.resource.data.coach_id == request.auth.uid
        && checkCreateRateLimit();
      
      // Lecture: coach ou athl√®te destinataire
      allow read: if isAuthenticated() && 
        (resource.data.coach_id == request.auth.uid || 
         resource.data.athlete_id == request.auth.uid)
        && checkRateLimit();
      
      // Liste (avec rate limit)
      allow list: if isAuthenticated() && checkRateLimit();
      
      // Modification: coach uniquement
      allow update: if isAuthenticated() && 
        resource.data.coach_id == request.auth.uid
        && checkRateLimit();
      
      // Suppression: coach uniquement
      allow delete: if isAuthenticated() && 
        resource.data.coach_id == request.auth.uid
        && checkRateLimit();
    }

    // ====================================
    // INVITES COLLECTION
    // ====================================
    
    match /invites/{inviteId} {
      // Coachs peuvent cr√©er des invitations
      allow create: if isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach' &&
        request.resource.data.coachId == request.auth.uid
        && checkCreateRateLimit();
      
      // Lecture: coach propri√©taire ou invitations actives
      allow read: if isAuthenticated() && (
        resource.data.coachId == request.auth.uid ||
        resource.data.status == 'active'
      ) && checkRateLimit();
      
      // Liste (avec rate limit)
      allow list: if isAuthenticated() && checkRateLimit();
      
      // Mise √† jour: coach r√©voque ou athl√®te utilise
      allow update: if isAuthenticated() && (
        resource.data.coachId == request.auth.uid ||
        (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'sportif' &&
          resource.data.status == 'active' &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['status', 'usedByAthleteId', 'usedAt']) &&
          request.resource.data.status == 'used'
        )
      ) && checkRateLimit();
      
      allow delete: if false;
    }

    // ====================================
    // CHALLENGES COLLECTION
    // ====================================
    
    match /challenges/{challengeId} {
      allow read: if isAuthenticated() && 
        (resource.data.user_id == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach')
        && checkRateLimit();
      
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid
        && checkCreateRateLimit();
      
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
      
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
    }

    // ====================================
    // ACHIEVEMENTS COLLECTION
    // ====================================
    
    match /achievements/{achievementId} {
      allow read: if isAuthenticated() && 
        (resource.data.user_id == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach')
        && checkRateLimit();
      
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid
        && checkCreateRateLimit();
      
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
      
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
    }

    // ====================================
    // USER PROGRESS COLLECTION
    // ====================================
    
    match /user_progress/{progressId} {
      allow read: if isAuthenticated() && 
        (resource.data.user_id == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach')
        && checkRateLimit();
      
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid
        && checkCreateRateLimit();
      
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
      
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid
        && checkRateLimit();
    }
  }
}
