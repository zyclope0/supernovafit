/**
 * Script de population de donn√©es de test coh√©rentes
 * Bas√© sur l'historique r√©el : 99kg (31.07.2025) -> 89kg (20.10.2025)
 * R√©gime alimentaire progressif avec changement il y a 3 semaines
 * 3-4 entra√Ænements/semaine (endurance + musculation)
 */

import { initializeApp, cert, getApps } from 'firebase-admin/app';
import { getFirestore, Timestamp } from 'firebase-admin/firestore';
import * as fs from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url';

// √âquivalent de __dirname en ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Initialiser Firebase Admin
if (!getApps().length) {
  const serviceAccount = JSON.parse(
    fs.readFileSync(
      path.join(__dirname, '../firebase-service-account.json'),
      'utf8',
    ),
  );

  initializeApp({
    credential: cert(serviceAccount),
    projectId: 'supernovafit-a6fe7',
  });
}

const db = getFirestore();

// ID utilisateur de test (sportif)
const TEST_USER_ID = 'VBSTkEAy1OWptNJmUbIjFFz62Zg1'; // User test r√©el
const COACH_ID = 'QwpCZpdwXURc3pB2m8K51h4S6ff1'; // Coach r√©el

// Dates cl√©s
const START_DATE = new Date('2024-07-31'); // 99kg
const END_DATE = new Date('2024-10-20'); // 89kg
const DIET_CHANGE_DATE = new Date('2024-09-29'); // Il y a 3 semaines

// Fonction pour g√©n√©rer une progression lin√©aire du poids
function calculateWeight(date: Date): number {
  const totalDays =
    (END_DATE.getTime() - START_DATE.getTime()) / (1000 * 60 * 60 * 24);
  const daysPassed =
    (date.getTime() - START_DATE.getTime()) / (1000 * 60 * 60 * 24);

  const startWeight = 99;
  const endWeight = 89;
  const weightLoss = startWeight - endWeight;

  // Progression lin√©aire avec l√©g√®res variations
  const baseWeight = startWeight - (weightLoss * daysPassed) / totalDays;
  const variation = (Math.random() - 0.5) * 0.5; // ¬±0.25kg variation

  return Math.round((baseWeight + variation) * 10) / 10;
}

// Fonction pour calculer IMC
function calculateIMC(poids: number, taille: number): number {
  return Math.round((poids / Math.pow(taille / 100, 2)) * 10) / 10;
}

// Fonction pour calculer masse grasse estim√©e
function calculateBodyFat(poids: number, progressRatio: number): number {
  const startBodyFat = 28; // Estimation d√©part
  const endBodyFat = 18; // Estimation fin
  const bodyFat = startBodyFat - (startBodyFat - endBodyFat) * progressRatio;

  return Math.round(bodyFat * 10) / 10;
}

/**
 * ANCIEN R√âGIME (jusqu'au 29.09.2024)
 */
const OLD_DIET = {
  petit_dej: [
    {
      nom: 'Banane',
      quantite: '1 unit√©',
      calories: 105,
      proteines: 1.3,
      glucides: 27,
      lipides: 0.4,
    },
    {
      nom: "Flocons d'avoine",
      quantite: '50g',
      calories: 190,
      proteines: 6.5,
      glucides: 34,
      lipides: 3.5,
    },
    {
      nom: 'S√©r√© maigre',
      quantite: '250g',
      calories: 170,
      proteines: 30,
      glucides: 10,
      lipides: 1,
    },
  ],
  collation_matin: [
    {
      nom: 'Fromage',
      quantite: '60g',
      calories: 240,
      proteines: 15,
      glucides: 1,
      lipides: 20,
    },
  ],
  dejeuner: [
    {
      nom: 'Poulet grill√©',
      quantite: '120g',
      calories: 198,
      proteines: 37,
      glucides: 0,
      lipides: 4.3,
    },
    {
      nom: 'Brocoli vapeur',
      quantite: '200g',
      calories: 68,
      proteines: 5.6,
      glucides: 14,
      lipides: 0.7,
    },
  ],
  collation_apres_midi: [
    {
      nom: 'Viande des Grisons',
      quantite: '60g',
      calories: 132,
      proteines: 24,
      glucides: 0,
      lipides: 3.6,
    },
  ],
  diner: [
    {
      nom: 'Saumon',
      quantite: '120g',
      calories: 248,
      proteines: 25,
      glucides: 0,
      lipides: 16,
    },
    {
      nom: 'Haricots verts',
      quantite: '200g',
      calories: 62,
      proteines: 3.6,
      glucides: 14,
      lipides: 0.4,
    },
  ],
  collation_soir: [
    {
      nom: 'S√©r√© maigre',
      quantite: '250g',
      calories: 170,
      proteines: 30,
      glucides: 10,
      lipides: 1,
    },
    {
      nom: 'Pomme',
      quantite: '150g',
      calories: 78,
      proteines: 0.4,
      glucides: 21,
      lipides: 0.3,
    },
  ],
};

/**
 * NOUVEAU R√âGIME (depuis le 29.09.2024)
 */
const NEW_DIET = {
  petit_dej: [
    {
      nom: 'Pain complet',
      quantite: '50g',
      calories: 130,
      proteines: 5,
      glucides: 24,
      lipides: 1.5,
    },
    {
      nom: 'Beurre',
      quantite: '10g',
      calories: 75,
      proteines: 0.1,
      glucides: 0.1,
      lipides: 8.3,
    },
    {
      nom: 'Confiture',
      quantite: '20g',
      calories: 52,
      proteines: 0.1,
      glucides: 13,
      lipides: 0,
    },
  ],
  collation_matin: [
    {
      nom: 'Viande s√©ch√©e',
      quantite: '50g',
      calories: 110,
      proteines: 20,
      glucides: 0,
      lipides: 3,
    },
  ],
  dejeuner: [
    {
      nom: 'Poulet grill√©',
      quantite: '140g',
      calories: 231,
      proteines: 43,
      glucides: 0,
      lipides: 5,
    },
    {
      nom: 'Courgettes',
      quantite: '200g',
      calories: 34,
      proteines: 2.4,
      glucides: 7,
      lipides: 0.6,
    },
  ],
  collation_apres_midi: [
    {
      nom: 'Amandes',
      quantite: '30g',
      calories: 174,
      proteines: 6.3,
      glucides: 6.6,
      lipides: 15,
    },
  ],
  diner: [
    {
      nom: 'Pommes de terre',
      quantite: '200g',
      calories: 154,
      proteines: 4,
      glucides: 36,
      lipides: 0.2,
    },
    {
      nom: 'Steak de boeuf',
      quantite: '120g',
      calories: 250,
      proteines: 26,
      glucides: 0,
      lipides: 16,
    },
    {
      nom: 'Salade verte',
      quantite: '100g',
      calories: 15,
      proteines: 1.4,
      glucides: 2.9,
      lipides: 0.2,
    },
  ],
  collation_soir: [
    {
      nom: 'Chocolat noir 70%',
      quantite: '20g (4 carr√©s)',
      calories: 114,
      proteines: 1.4,
      glucides: 10,
      lipides: 8,
    },
  ],
};

/**
 * Entra√Ænements types
 */
const TRAININGS = [
  {
    type: 'Cardio',
    nom: 'Course √† pied',
    duree: 45,
    intensite: 'Mod√©r√©e',
    calories: 450,
    exercices: [
      { nom: '√âchauffement', duree: 5, intensite: 'Faible' },
      { nom: 'Course endurance', duree: 35, intensite: 'Mod√©r√©e' },
      { nom: 'Retour au calme', duree: 5, intensite: 'Faible' },
    ],
  },
  {
    type: 'Musculation',
    nom: 'Full body',
    duree: 60,
    intensite: '√âlev√©e',
    calories: 350,
    exercices: [
      { nom: 'Squat', series: 4, repetitions: 12, poids: 80, repos: 90 },
      {
        nom: 'D√©velopp√© couch√©',
        series: 4,
        repetitions: 10,
        poids: 70,
        repos: 90,
      },
      {
        nom: 'Soulev√© de terre',
        series: 3,
        repetitions: 8,
        poids: 100,
        repos: 120,
      },
      { nom: 'Tractions', series: 3, repetitions: 10, repos: 90 },
      { nom: 'Dips', series: 3, repetitions: 12, repos: 60 },
    ],
  },
  {
    type: 'Cardio',
    nom: 'V√©lo',
    duree: 50,
    intensite: 'Mod√©r√©e',
    calories: 400,
    exercices: [
      { nom: '√âchauffement', duree: 5, intensite: 'Faible' },
      { nom: 'V√©lo endurance', duree: 40, intensite: 'Mod√©r√©e' },
      { nom: 'Retour au calme', duree: 5, intensite: 'Faible' },
    ],
  },
  {
    type: 'Musculation',
    nom: 'Haut du corps',
    duree: 55,
    intensite: '√âlev√©e',
    calories: 320,
    exercices: [
      {
        nom: 'D√©velopp√© inclin√©',
        series: 4,
        repetitions: 10,
        poids: 60,
        repos: 90,
      },
      { nom: 'Rowing barre', series: 4, repetitions: 10, poids: 70, repos: 90 },
      {
        nom: 'D√©velopp√© militaire',
        series: 3,
        repetitions: 12,
        poids: 40,
        repos: 90,
      },
      { nom: 'Curl biceps', series: 3, repetitions: 12, poids: 15, repos: 60 },
      {
        nom: 'Extension triceps',
        series: 3,
        repetitions: 12,
        poids: 12,
        repos: 60,
      },
    ],
  },
];

/**
 * Nettoyage des donn√©es de test
 */
async function cleanTestData() {
  console.log('üßπ Nettoyage des anciennes donn√©es...');

  const collections = [
    'repas',
    'entrainements',
    'mesures',
    'journal',
    'coach_comments',
    'coach_diet_plans',
    'challenges',
    'badges',
    'objectifs',
  ];

  for (const collectionName of collections) {
    const snapshot = await db
      .collection(collectionName)
      .where('user_id', '==', TEST_USER_ID)
      .get();

    const batch = db.batch();
    snapshot.docs.forEach((doc: FirebaseFirestore.QueryDocumentSnapshot) => {
      batch.delete(doc.ref);
    });

    if (snapshot.size > 0) {
      await batch.commit();
      console.log(
        `  ‚úì ${snapshot.size} documents supprim√©s de ${collectionName}`,
      );
    }
  }

  console.log('‚úÖ Nettoyage termin√©\n');
}

/**
 * Population des mesures (99kg -> 89kg)
 */
async function populateMesures() {
  console.log('üìè Cr√©ation des mesures...');

  const TAILLE = 178; // cm
  const totalDays = Math.floor(
    (END_DATE.getTime() - START_DATE.getTime()) / (1000 * 60 * 60 * 24),
  );

  const batch = db.batch();
  let count = 0;

  // Cr√©er une mesure tous les 3-4 jours
  for (let i = 0; i <= totalDays; i += Math.random() > 0.5 ? 3 : 4) {
    const date = new Date(START_DATE);
    date.setDate(date.getDate() + i);

    if (date > END_DATE) break;

    // ‚ö†Ô∏è IMPORTANT: Timestamp √† 12:00:00 (comme l'app)
    const dateAt12 = new Date(date);
    dateAt12.setHours(12, 0, 0, 0);

    const poids = calculateWeight(date);
    const imc = calculateIMC(poids, TAILLE);
    const progressRatio = i / totalDays;
    const masse_grasse = calculateBodyFat(poids, progressRatio);
    const tour_taille = Math.round(98 - 10 * progressRatio); // 98cm -> 88cm

    const mesureRef = db.collection('mesures').doc();
    batch.set(mesureRef, {
      user_id: TEST_USER_ID,
      date: Timestamp.fromDate(dateAt12), // ‚úÖ Timestamp √† 12:00:00
      poids,
      taille: TAILLE,
      imc,
      masse_grasse,
      tour_taille,
      created_at: Timestamp.fromDate(new Date()),
    });

    count++;
  }

  await batch.commit();
  console.log(`  ‚úì ${count} mesures cr√©√©es\n`);
}

/**
 * Population des repas
 */
async function populateRepas() {
  console.log('üçΩÔ∏è Cr√©ation des repas...');

  const totalDays = Math.floor(
    (END_DATE.getTime() - START_DATE.getTime()) / (1000 * 60 * 60 * 24),
  );
  let count = 0;

  for (let i = 0; i <= totalDays; i++) {
    const date = new Date(START_DATE);
    date.setDate(date.getDate() + i);

    if (date > END_DATE) break;

    // ‚ö†Ô∏è IMPORTANT: Timestamp √† 12:00:00 (comme l'app)
    const dateAt12 = new Date(date);
    dateAt12.setHours(12, 0, 0, 0);

    // Choisir le r√©gime appropri√©
    const diet = date < DIET_CHANGE_DATE ? OLD_DIET : NEW_DIET;

    const batch = db.batch();

    // Cr√©er les repas pour chaque moment de la journ√©e
    for (const [mealType, aliments] of Object.entries(diet)) {
      const repasRef = db.collection('repas').doc();

      const macros = aliments.reduce(
        (acc, aliment) => ({
          kcal: acc.kcal + aliment.calories,
          prot: acc.prot + aliment.proteines,
          glucides: acc.glucides + aliment.glucides,
          lipides: acc.lipides + aliment.lipides,
        }),
        { kcal: 0, prot: 0, glucides: 0, lipides: 0 },
      );

      const now = new Date();

      batch.set(repasRef, {
        user_id: TEST_USER_ID,
        date: Timestamp.fromDate(dateAt12), // ‚úÖ Timestamp √† 12:00:00
        repas: mealType,
        aliments: aliments.map((a, index) => {
          const quantiteNum = parseFloat(a.quantite.replace(/[^\d.]/g, ''));
          const unite = a.quantite.match(/[a-zA-Z]+/)?.[0] || 'g';

          // Calcul des macros_base (pour 100g/100ml)
          const macros_base = {
            kcal: Math.round((a.calories / quantiteNum) * 100),
            prot: Math.round((a.proteines / quantiteNum) * 100 * 10) / 10,
            glucides: Math.round((a.glucides / quantiteNum) * 100 * 10) / 10,
            lipides: Math.round((a.lipides / quantiteNum) * 100 * 10) / 10,
          };

          return {
            id: `${Date.now()}-${count}-${index}-${Math.random().toString(36).substr(2, 9)}`,
            nom: a.nom,
            nom_lower: a.nom.toLowerCase(), // ‚úÖ Ajout√©
            quantite: quantiteNum,
            unite: unite,
            user_id: TEST_USER_ID, // ‚úÖ Ajout√©
            created_at: Timestamp.fromDate(now), // ‚úÖ Ajout√©
            macros: {
              kcal: a.calories,
              prot: a.proteines,
              glucides: a.glucides,
              lipides: a.lipides,
            },
            macros_base: macros_base, // ‚úÖ Ajout√©
            // openfoodfacts_id: undefined // Pas disponible pour test data
          };
        }),
        macros: {
          kcal: Math.round(macros.kcal),
          prot: Math.round(macros.prot * 10) / 10,
          glucides: Math.round(macros.glucides * 10) / 10,
          lipides: Math.round(macros.lipides * 10) / 10,
        },
        created_at: Timestamp.fromDate(now),
      });

      count++;
    }

    await batch.commit();
  }

  console.log(`  ‚úì ${count} repas cr√©√©s\n`);
}

/**
 * Population des entra√Ænements (3-4 par semaine)
 */
async function populateEntrainements() {
  console.log('üèãÔ∏è Cr√©ation des entra√Ænements...');

  const totalDays = Math.floor(
    (END_DATE.getTime() - START_DATE.getTime()) / (1000 * 60 * 60 * 24),
  );
  let count = 0;
  let weekTrainings = 0;
  let currentWeek = 0;

  for (let i = 0; i <= totalDays; i++) {
    const date = new Date(START_DATE);
    date.setDate(date.getDate() + i);

    if (date > END_DATE) break;

    // ‚ö†Ô∏è IMPORTANT: Timestamp √† 12:00:00 (comme l'app)
    const dateAt12 = new Date(date);
    dateAt12.setHours(12, 0, 0, 0);

    const week = Math.floor(i / 7);
    if (week !== currentWeek) {
      currentWeek = week;
      weekTrainings = 0;
    }

    // 3-4 entra√Ænements par semaine
    const targetTrainings = Math.random() > 0.5 ? 3 : 4;
    const dayOfWeek = date.getDay();

    // √âviter dimanche, privil√©gier lundi/mercredi/vendredi/samedi
    const shouldTrain =
      weekTrainings < targetTrainings &&
      dayOfWeek !== 0 &&
      [1, 3, 5, 6].includes(dayOfWeek) &&
      Math.random() > 0.3;

    if (shouldTrain) {
      const training = TRAININGS[Math.floor(Math.random() * TRAININGS.length)];
      const trainRef = db.collection('entrainements').doc();

      const trainingData: any = {
        user_id: TEST_USER_ID,
        date: Timestamp.fromDate(dateAt12), // ‚úÖ Timestamp √† 12:00:00
        type: training.type,
        duree: training.duree,
        source: 'manuel',
        calories: training.calories,
        commentaire: `Session ${training.nom} - Bonne performance`,
        created_at: Timestamp.fromDate(new Date()),
      };

      // Ajouter distance uniquement pour le cardio
      if (training.type === 'Cardio') {
        trainingData.distance = Math.round(training.duree * 0.15 * 10) / 10;
        trainingData.vitesse_moy =
          Math.round((trainingData.distance / (training.duree / 60)) * 10) / 10;
      }

      await trainRef.set(trainingData);

      weekTrainings++;
      count++;
    }
  }

  console.log(`  ‚úì ${count} entra√Ænements cr√©√©s\n`);
}

/**
 * Population du journal (humeur, √©nergie, sommeil, stress)
 */
async function populateJournal() {
  console.log('üìì Cr√©ation des entr√©es de journal...');

  const totalDays = Math.floor(
    (END_DATE.getTime() - START_DATE.getTime()) / (1000 * 60 * 60 * 24),
  );
  let count = 0;

  for (let i = 0; i <= totalDays; i += Math.random() > 0.3 ? 1 : 2) {
    const date = new Date(START_DATE);
    date.setDate(date.getDate() + i);

    if (date > END_DATE) break;

    // ‚ö†Ô∏è IMPORTANT: Timestamp √† 12:00:00 (comme l'app)
    const dateAt12 = new Date(date);
    dateAt12.setHours(12, 0, 0, 0);

    const progressRatio = i / totalDays;

    // Progression positive : meilleure humeur et √©nergie au fil du temps
    const baseHumeur = 5 + Math.floor(progressRatio * 3);
    const baseEnergie = 5 + Math.floor(progressRatio * 3);

    const journalRef = db.collection('journal').doc();
    await journalRef.set({
      user_id: TEST_USER_ID,
      date: Timestamp.fromDate(dateAt12), // ‚úÖ Timestamp √† 12:00:00
      humeur: Math.min(10, baseHumeur + Math.floor(Math.random() * 2)),
      energie: Math.min(10, baseEnergie + Math.floor(Math.random() * 2)),
      sommeil: 6 + Math.floor(Math.random() * 3),
      stress: Math.max(
        1,
        5 - Math.floor(progressRatio * 2) + Math.floor(Math.random() * 2),
      ),
      note: [
        'Bonne journ√©e, je me sens de mieux en mieux',
        "Entra√Ænement intense aujourd'hui, fatigu√© mais satisfait",
        'Poids qui continue de baisser, motivation au top!',
        'Nouvelle routine alimentaire qui me convient bien',
        'Je vois les progr√®s dans le miroir, √ßa fait plaisir',
        'Sommeil un peu l√©ger, mais forme OK',
        'Excellente session de sport, je progresse!',
      ][Math.floor(Math.random() * 7)],
      created_at: Timestamp.fromDate(new Date()),
    });

    count++;
  }

  console.log(`  ‚úì ${count} entr√©es de journal cr√©√©es\n`);
}

/**
 * Population des commentaires coach
 */
async function populateCoachComments() {
  console.log('üí¨ Cr√©ation des commentaires coach...');

  const comments = [
    {
      module: 'diete',
      date: new Date('2024-08-15'),
      comment:
        "Excellent travail sur ton alimentation! Les flocons d'avoine et le s√©r√© sont un super combo le matin. Continue comme √ßa!",
    },
    {
      module: 'entrainements',
      date: new Date('2024-08-20'),
      comment:
        'Tr√®s bon rythme de 3-4 s√©ances par semaine. Le mix cardio/musculation est parfait pour ta perte de poids. Bravo!',
    },
    {
      module: 'mesures',
      date: new Date('2024-09-01'),
      comment:
        "Super progression! -6kg en 1 mois, c'est dans la fourchette id√©ale (0.5-1kg/semaine). Tu es sur la bonne voie!",
    },
    {
      module: 'diete',
      date: new Date('2024-09-29'),
      comment:
        "J'aime bien l'√©volution de ta di√®te avec plus de glucides complexes. Le pain et les pommes de terre vont t'aider √† maintenir ton √©nergie pour les entra√Ænements.",
    },
    {
      module: 'journal',
      date: new Date('2024-10-05'),
      comment:
        "Je vois que ton humeur et ton √©nergie s'am√©liorent! C'est normal, la perte de poids et l'activit√© physique ont un impact positif sur le moral. Continue!",
    },
    {
      module: 'mesures',
      date: new Date('2024-10-15'),
      comment:
        "Magnifique! -10kg en moins de 3 mois, c'est un exploit. Ta masse grasse a bien diminu√© aussi. Objectif presque atteint!",
    },
  ];

  const batch = db.batch();

  for (const comment of comments) {
    const commentRef = db.collection('coach_comments').doc();
    batch.set(commentRef, {
      coach_id: COACH_ID,
      athlete_id: TEST_USER_ID,
      module: comment.module,
      date: comment.date ? Timestamp.fromDate(comment.date) : null,
      comment: comment.comment,
      read_by_athlete: false,
      created_at: Timestamp.fromDate(comment.date || new Date()),
    });
  }

  await batch.commit();
  console.log(`  ‚úì ${comments.length} commentaires coach cr√©√©s\n`);
}

/**
 * Population du plan di√®te coach
 */
async function populateCoachDietPlan() {
  console.log('üìã Cr√©ation du plan di√®te coach...');

  const dietPlanRef = db.collection('coach_diet_plans').doc();
  await dietPlanRef.set({
    coach_id: COACH_ID,
    athlete_id: TEST_USER_ID,
    date_creation: Timestamp.fromDate(new Date('2024-09-29')),
    petit_dej:
      'Pain complet 50g + beurre 10g + confiture 20g - Bon √©quilibre glucides/lipides pour d√©marrer la journ√©e',
    collation_matin:
      'Viande s√©ch√©e 50g - Prot√©ines de qualit√©, pratique √† transporter',
    dejeuner:
      'Viande/poisson 140g + l√©gumes √† volont√© - Augmentation des portions prot√©iques pour la sati√©t√©',
    collation_apres_midi:
      'Ol√©agineux 30g (amandes, noix) - Bonnes graisses + sati√©t√©',
    diner:
      'Pommes de terre 200g + viande/poisson 120g + l√©gumes - R√©introduction des glucides complexes le soir',
    collation_soir:
      'Chocolat noir 70% (4 carr√©s) - Petit plaisir contr√¥l√©, bon pour le moral',
    notes_generales:
      "Plan adapt√© apr√®s 2 mois de di√®te stricte. R√©introduction progressive des glucides complexes (pain, pommes de terre) pour maintenir l'√©nergie et √©viter l'effet yo-yo. Maintien d'un d√©ficit calorique mod√©r√© (~300-400 kcal) pour continuer la perte de poids de mani√®re durable. Excellent travail jusqu'ici, -8kg en 2 mois!",
    created_at: Timestamp.fromDate(new Date('2024-09-29')),
  });

  console.log(`  ‚úì Plan di√®te coach cr√©√©\n`);
}

/**
 * Fonction principale
 */
async function main() {
  console.log('üöÄ D√©but de la population des donn√©es de test\n');
  console.log('üìä Transformation : 99kg (31.07.2024) -> 89kg (20.10.2024)');
  console.log('‚è±Ô∏è  Dur√©e : 81 jours');
  console.log('üìâ Perte : -10kg (-12.4%)');
  console.log('üéØ Rythme : ~0.88kg/semaine\n');

  try {
    // 1. Nettoyage
    await cleanTestData();

    // 2. Mesures (progression poids)
    await populateMesures();

    // 3. Repas (ancien + nouveau r√©gime)
    await populateRepas();

    // 4. Entra√Ænements (3-4/semaine)
    await populateEntrainements();

    // 5. Journal (humeur, √©nergie)
    await populateJournal();

    // 6. Commentaires coach
    await populateCoachComments();

    // 7. Plan di√®te coach
    await populateCoachDietPlan();

    console.log('‚úÖ Population termin√©e avec succ√®s!');
    console.log('\nüìà R√©capitulatif des donn√©es cr√©√©es:');
    console.log('  ‚Ä¢ ~27 mesures (tous les 3-4 jours)');
    console.log('  ‚Ä¢ ~486 repas (6 repas/jour pendant 81 jours)');
    console.log('  ‚Ä¢ ~40 entra√Ænements (3-4/semaine)');
    console.log('  ‚Ä¢ ~60 entr√©es de journal');
    console.log('  ‚Ä¢ 6 commentaires coach');
    console.log('  ‚Ä¢ 1 plan di√®te coach');
  } catch (error) {
    console.error('‚ùå Erreur lors de la population:', error);
    process.exit(1);
  }
}

// Ex√©cution
main()
  .then(() => {
    console.log('\n‚ú® Script termin√©');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });
